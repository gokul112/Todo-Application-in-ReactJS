{"version":3,"sources":["components/Header.js","components/Todotext.js","components/usetodoInputstate.js","components/TodoList.js","components/App.js","components/UsetodoState.js","serviceWorker.js","index.js"],"names":["Header","props","Typography","component","variant","title","useStyles","makeStyles","theme","root","paddingLeft","display","alignItems","width","input","marginLeft","spacing","flex","Todotext","saveTodo","classes","initialState","useState","todoValue","setListValue","onChange","event","target","value","reset","usetodoInputstate","className","onSubmit","preventDefault","TextField","placeholder","margin","maxWidth","marginRight","backgroundColor","TodoList","todos","deleteTodo","List","map","todo","index","ListItem","key","toString","dense","button","Checkbox","tabIndex","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","onClick","App","setTodos","addTodo","todoText","trimmedText","trim","length","todoIndex","newTodos","filter","_","UsetodoState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAYeA,EARA,SAACC,GACZ,OACG,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAC9BH,EAAMI,Q,kCCDZC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,YAAa,MACbC,QAAS,OACTC,WAAY,SACZC,MAAO,KAETC,MAAO,CACLC,WAAYP,EAAMQ,QAAQ,GAC1BC,KAAM,OAqBGC,EAjBE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAETC,EAAUd,IAFa,EClBlB,SAACe,GAAkB,IAAD,EACIC,mBAASD,GADb,mBACtBE,EADsB,KACZC,EADY,KAEzB,MAAO,CACHD,YACAE,SAAU,SAACC,GACPF,EAAaE,EAAMC,OAAOC,QAE9BC,MAAO,kBAAML,EAAa,MDcCM,CAAkB,IAA9CP,EAHsB,EAGtBA,UAAUE,EAHY,EAGZA,SAASI,EAHG,EAGHA,MAE1B,OACI,0BAAME,UAAWX,EAAQX,KAAMuB,SAAU,SAACN,GACtCA,EAAMO,iBACNd,EAASI,GACTM,MAEA,kBAACK,EAAA,EAAD,CAAWH,UAAWX,EAAQN,MAAOV,QAAQ,WAAW+B,YAAY,WAAWC,OAAO,SAASR,MAAOL,EAAWE,SAAUA,M,uEEpBjInB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJI,MAAO,OACPwB,SAAU,MACV1B,QAAS,QACTI,WAAY,OACZuB,YAAa,OACbC,gBAAiB,aA4BRC,EAxBE,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,WACbtB,EAAUd,IAClB,OACI,kBAACqC,EAAA,EAAD,CAAMZ,UAAWX,EAAQX,MACxBgC,EAAMG,KAAI,SAACC,EAAKC,GAAN,OACP,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAMG,WAAYC,OAAK,EAACC,QAAM,GAC7C,kBAACC,EAAA,EAAD,CAAUC,UAAW,EAAGC,eAAa,IACjC,kBAACC,EAAA,EAAD,CAAcC,QAASX,IACvB,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,aAAW,SACXC,QAAS,WACTlB,EAAWI,KAGX,kBAAC,IAAD,c,QChBTe,MAbf,WAAgB,IAAD,ECLA,SAACxC,GAAkB,IAAD,EAELC,mBAASD,GAFJ,mBAExBoB,EAFwB,KAEjBqB,EAFiB,KAI/B,MAAO,CACLrB,QACAsB,QAAS,SAACC,GACN,IAAMC,EAAcD,EAASE,OACzBD,EAAYE,OAAS,GACrBL,EAAS,GAAD,mBAAKrB,GAAL,CAAYwB,MAE5BvB,WAAY,SAAC0B,GACX,IAAMC,EAAW5B,EAAM6B,QAAO,SAACC,EAAGzB,GAAJ,OAAcA,IAAUsB,KACtDN,EAASO,KDNuBG,CAAa,IAA1C/B,EAFM,EAENA,MAAOsB,EAFD,EAECA,QAAQrB,EAFT,EAESA,WAEtB,OACE,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQ1B,MAAM,qBACd,kBAAC,EAAD,CAAUc,SAAU4C,IACpB,kBAAC,EAAD,CAAUtB,MAAOA,EAAOC,WAAYA,MEHxB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a4a6fbd.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst Header = (props) => {\n    return (\n       <Typography component=\"h1\" variant=\"h2\">\n           {props.title}\n       </Typography>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { TextField } from '@material-ui/core';\nimport usetodoInputstate from './usetodoInputstate';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      paddingLeft: \"38%\",\n      display: 'flex',\n      alignItems: 'center',\n      width: 400,\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n    },\n}))\n\nconst Todotext = ({saveTodo}) => {\n\n    const classes = useStyles();\n    const {todoValue,onChange,reset} = usetodoInputstate(\"\"); //Seperated the hook logic from component\n\n    return (\n        <form className={classes.root} onSubmit={(event) => {\n            event.preventDefault();\n            saveTodo(todoValue);\n            reset();\n          }}>\n            <TextField className={classes.input} variant=\"outlined\" placeholder=\"Add todo\" margin=\"normal\" value={todoValue} onChange={onChange} />\n        </form>\n\n    )\n}\n\nexport default Todotext;\n","import {useState} from 'react';\nexport default (initialState) => {\n    const [todoValue,setListValue] = useState(initialState);\n        return {\n            todoValue,\n            onChange: (event) => {\n                setListValue(event.target.value);\n            },\n            reset: () => setListValue('')\n        };\n\n}","import React from 'react';\nimport List from '@material-ui/core/List';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      maxWidth: \"35%\",\n      display: \"block\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      backgroundColor: \"white\",\n    },\n  }));\n\nconst TodoList = ({todos,deleteTodo }) => {\n      const classes = useStyles();\n    return (\n        <List className={classes.root}>\n        {todos.map((todo,index)=>(\n            <ListItem key={index.toString()} dense button>\n            <Checkbox tabIndex={-1} disableRipple />\n                <ListItemText primary={todo} />\n                <ListItemSecondaryAction>\n                    <IconButton\n                        aria-label=\"Delete\"\n                        onClick={() => {\n                        deleteTodo(index);\n                        }}\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>\n        ))}\n        </List>\n    )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport Header from './Header';\nimport '../App.css';\nimport Todotext from './Todotext';\nimport TodoList from './TodoList';\nimport UsetodoState from './UsetodoState';\n\nfunction App() {\n\n  const {todos, addTodo,deleteTodo} = UsetodoState([]);\n\n  return (\n    <div className=\"App\">\n        <Header title=\"Todo Application\"/>\n        <Todotext saveTodo={addTodo}/>\n        <TodoList todos={todos} deleteTodo={deleteTodo}/>\n     </div>\n  );\n}\n\nexport default App;\n","import {useState} from 'react';\n\nexport default (initialState) => {\n\n  const [todos, setTodos] = useState(initialState);\n\n  return {\n    todos,\n    addTodo: (todoText) => {\n        const trimmedText = todoText.trim();\n        if (trimmedText.length > 0) \n            setTodos([...todos, trimmedText]);\n    },\n    deleteTodo: (todoIndex) => {\n      const newTodos = todos.filter((_, index) => index !== todoIndex);\n      setTodos(newTodos);\n    }\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}